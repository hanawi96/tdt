// Google Apps Script ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ Cloudflare Worker v√† ghi v√†o Google Sheets
// Copy code n√†y v√†o Google Apps Script Editor

// ID c·ªßa Google Sheets (l·∫•y t·ª´ URL c·ªßa sheet)
const SHEET_ID = '1Je2tfaMu9_sYWiyx_NjUpuPkKPJ579atV2ASIQab-TI';

// T√™n sheet (tab) ƒë·ªÉ ghi d·ªØ li·ªáu
const SHEET_NAME = 'ƒê∆°n H√†ng TDT'; // C√≥ th·ªÉ thay ƒë·ªïi t√™n sheet

function doPost(e) {
  try {
    console.log('üì• Google Script: Received POST request');
    console.log('üìã Google Script: Raw request data:', e);

    // L·∫•y d·ªØ li·ªáu t·ª´ request
    let orderData;
    if (e.postData && e.postData.contents) {
      console.log('üìÑ Google Script: Post data contents:', e.postData.contents);
      orderData = JSON.parse(e.postData.contents);
    } else {
      console.error('‚ùå Google Script: No postData found');
      throw new Error('No data received');
    }

    console.log('üìã Google Script: Parsed order data:', orderData);
    console.log('üéØ Google Script: Using SHEET_ID:', SHEET_ID);
    console.log('üìä Google Script: Using SHEET_NAME:', SHEET_NAME);
    
    // Ki·ªÉm tra SHEET_ID c√≥ ƒë∆∞·ª£c thay ch∆∞a
    if (SHEET_ID === 'YOUR_GOOGLE_SHEET_ID_HERE') {
      throw new Error('SHEET_ID ch∆∞a ƒë∆∞·ª£c thay! Vui l√≤ng thay YOUR_GOOGLE_SHEET_ID_HERE b·∫±ng ID th·ª±c c·ªßa Google Sheets');
    }

    // M·ªü Google Sheets
    console.log('üìÇ Google Script: Opening spreadsheet...');
    let spreadsheet;
    try {
      spreadsheet = SpreadsheetApp.openById(SHEET_ID);
      console.log('‚úÖ Google Script: Spreadsheet opened successfully');
    } catch (error) {
      console.error('‚ùå Google Script: Cannot open spreadsheet:', error);
      throw new Error('Kh√¥ng th·ªÉ m·ªü Google Sheets. Ki·ªÉm tra SHEET_ID: ' + SHEET_ID);
    }

    let sheet = spreadsheet.getSheetByName(SHEET_NAME);
    console.log('üìã Google Script: Sheet found:', !!sheet);

    // N·∫øu sheet kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi
    if (!sheet) {
      console.log('üÜï Google Script: Creating new sheet:', SHEET_NAME);
      sheet = spreadsheet.insertSheet(SHEET_NAME);
    }

    // Ki·ªÉm tra v√† t·∫°o header n·∫øu c·∫ßn
    const headers = [
      'Th·ªùi gian',
      'M√£ ƒë∆°n h√†ng',
      'T√™n kh√°ch h√†ng',
      'S·ªë ƒëi·ªán tho·∫°i',
      'ƒê·ªãa ch·ªâ',
      'S·ªë l∆∞·ª£ng',
      'T·ªïng ti·ªÅn',
      'Ch·ªØ tr√™n t√∫i',
      'Ghi ch√∫'
    ];

    // Ki·ªÉm tra xem c√≥ header ch∆∞a
    const firstRowData = sheet.getRange(1, 1, 1, headers.length).getValues()[0];
    const hasHeader = firstRowData[0] === 'Th·ªùi gian' && firstRowData[1] === 'M√£ ƒë∆°n h√†ng';

    if (!hasHeader) {
      console.log('üÜï Google Script: Creating/updating header...');

      // N·∫øu c√≥ d·ªØ li·ªáu, ch√®n row m·ªõi ·ªü ƒë·∫ßu cho header
      if (sheet.getLastRow() > 0) {
        sheet.insertRowBefore(1);
      }

      // T·∫°o header v·ªõi formatting
      const headerRange = sheet.getRange(1, 1, 1, headers.length);
      headerRange.setValues([headers]);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#4CAF50'); // M√†u xanh l√°
      headerRange.setFontColor('#FFFFFF'); // Ch·ªØ tr·∫Øng
      headerRange.setHorizontalAlignment('center'); // CƒÉn gi·ªØa header

      // L√†m n·ªïi b·∫≠t c·ªôt "T·ªïng ti·ªÅn" (c·ªôt 7)
      const totalColumn = sheet.getRange(1, 7, 1, 1);
      totalColumn.setBackground('#FF9800'); // M√†u cam n·ªïi b·∫≠t
      totalColumn.setFontWeight('bold');

      // Freeze header row
      sheet.setFrozenRows(1);

      // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt t·ªëi ∆∞u ƒë·ªÉ tr√°nh scroll ngang
      sheet.setColumnWidth(1, 120);  // Th·ªùi gian
      sheet.setColumnWidth(2, 140);  // M√£ ƒë∆°n h√†ng
      sheet.setColumnWidth(3, 150);  // T√™n kh√°ch h√†ng
      sheet.setColumnWidth(4, 120);  // S·ªë ƒëi·ªán tho·∫°i
      sheet.setColumnWidth(5, 250);  // ƒê·ªãa ch·ªâ (r·ªông nh·∫•t)
      sheet.setColumnWidth(6, 80);   // S·ªë l∆∞·ª£ng
      sheet.setColumnWidth(7, 100);  // T·ªïng ti·ªÅn
      sheet.setColumnWidth(8, 120);  // Ch·ªØ tr√™n t√∫i
      sheet.setColumnWidth(9, 200);  // Ghi ch√∫

      // Thi·∫øt l·∫≠p chi·ªÅu cao row m·∫∑c ƒë·ªãnh
      sheet.setRowHeight(1, 40); // Header cao h∆°n

      console.log('‚úÖ Google Script: Header created with optimized column widths');
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ ghi v√†o sheet
    const now = new Date();
    const timeString = Utilities.formatDate(now, 'Asia/Ho_Chi_Minh', 'dd/MM/yyyy HH:mm:ss');
    
    const rowData = [
      timeString,                                    // Th·ªùi gian
      orderData.orderId || '',                       // M√£ ƒë∆°n h√†ng
      orderData.customer?.name || '',                // T√™n kh√°ch h√†ng
      orderData.customer?.phone || '',               // S·ªë ƒëi·ªán tho·∫°i
      orderData.customer?.address || '',             // ƒê·ªãa ch·ªâ
      orderData.cart?.[0]?.quantity || 1,            // S·ªë l∆∞·ª£ng
      orderData.total || '',                         // T·ªïng ti·ªÅn
      orderData.cart?.[0]?.notes || '',              // Ch·ªØ tr√™n t√∫i
      orderData.customer?.notes || ''                // Ghi ch√∫
    ];
    
    // Ghi d·ªØ li·ªáu v√†o sheet
    console.log('üíæ Google Script: Writing data to sheet...');
    console.log('üìä Google Script: Row data to write:', rowData);

    try {
      // Th√™m d·ªØ li·ªáu v√†o sheet
      sheet.appendRow(rowData);

      // L·∫•y row v·ª´a th√™m ƒë·ªÉ format
      const lastRow = sheet.getLastRow();

      // CƒÉn gi·ªØa to√†n b·ªô row d·ªØ li·ªáu (9 c·ªôt thay v√¨ 10)
      const dataRowRange = sheet.getRange(lastRow, 1, 1, 9);
      dataRowRange.setHorizontalAlignment('center');
      dataRowRange.setVerticalAlignment('middle');

      // Format c·ªôt "T·ªïng ti·ªÅn" (c·ªôt 7) - l√†m n·ªïi b·∫≠t
      const totalCell = sheet.getRange(lastRow, 7);
      totalCell.setBackground('#FFF3E0'); // M√†u cam nh·∫°t
      totalCell.setFontWeight('bold');
      totalCell.setFontColor('#E65100'); // M√†u cam ƒë·∫≠m
      totalCell.setHorizontalAlignment('center');



      // Format c·ªôt "M√£ ƒë∆°n h√†ng" (c·ªôt 2)
      const orderIdCell = sheet.getRange(lastRow, 2);
      orderIdCell.setFontFamily('Courier New'); // Font monospace
      orderIdCell.setFontWeight('bold');
      orderIdCell.setHorizontalAlignment('center');

      // Format c·ªôt "ƒê·ªãa ch·ªâ" (c·ªôt 5) - cƒÉn tr√°i v√¨ text d√†i
      const addressCell = sheet.getRange(lastRow, 5);
      addressCell.setHorizontalAlignment('left');
      addressCell.setWrap(true); // Cho ph√©p xu·ªëng d√≤ng

      // Format c·ªôt "Ghi ch√∫" (c·ªôt 9) - cƒÉn tr√°i v√¨ text d√†i
      const noteCell = sheet.getRange(lastRow, 9);
      noteCell.setHorizontalAlignment('left');
      noteCell.setWrap(true); // Cho ph√©p xu·ªëng d√≤ng

      // Thi·∫øt l·∫≠p chi·ªÅu cao row t·ª± ƒë·ªông cho d·ªØ li·ªáu d√†i
      sheet.setRowHeight(lastRow, 30); // Cao h∆°n m·∫∑c ƒë·ªãnh ƒë·ªÉ hi·ªÉn th·ªã t·ªët

      console.log('‚úÖ Google Script: Data written to sheet successfully');
      console.log('üìç Google Script: New row added to sheet:', SHEET_NAME);
      console.log('üé® Google Script: Formatting applied to row:', lastRow);

    } catch (error) {
      console.error('‚ùå Google Script: Error writing to sheet:', error);
      throw new Error('Kh√¥ng th·ªÉ ghi d·ªØ li·ªáu v√†o sheet: ' + error.toString());
    }
    
    // Tr·∫£ v·ªÅ response th√†nh c√¥ng
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng',
        orderId: orderData.orderId,
        timestamp: timeString
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('‚ùå Google Script error:', error);
    
    // Tr·∫£ v·ªÅ response l·ªói
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi l∆∞u ƒë∆°n h√†ng',
        error: error.toString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// H√†m test ƒë·ªÉ ki·ªÉm tra (kh√¥ng b·∫Øt bu·ªôc)
function testFunction() {
  const testData = {
    orderId: 'TEST123',
    customer: {
      name: 'Nguy·ªÖn VƒÉn A',
      phone: '0123456789',
      address: 'H√† N·ªôi',
      notes: 'Giao h√†ng bu·ªïi s√°ng'
    },
    cart: [{
      quantity: 2,
      notes: 'Ch·ªØ: L·ªôc'
    }],
    total: '78,000ƒë'
  };
  
  const mockEvent = {
    postData: {
      contents: JSON.stringify(testData)
    }
  };
  
  const result = doPost(mockEvent);
  console.log('Test result:', result.getContent());
}
